name: Kustomize Overlay Test

on:
  workflow_dispatch:
    inputs:
      application:
        description: "Select application type"
        required: true
        type: choice
        options:
          - go-api
          - java-api
          - python-api
          - frontend
          - backend
      config_option:
        description: "Select configuration to modify (Only for go-api & java-api)"
        required: false
        type: choice
        options:
          - cpu_limit
          - memory_limit
          - cpu_request
          - memory_request
          - timeout_seconds
          - initial_delay_seconds
          - revision_history_limit
          - terminationGracePeriodSeconds
          - maxReplicas
      new_value:
        description: "Enter the new value for the selected configuration"
        required: false

jobs:
  test-kustomize:
    name: Test Kustomize Overlays
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          sudo apt-get install -y jq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Validate Application Customization
        run: |
          if [[ "${{ github.event.inputs.application }}" != "go-api" && "${{ github.event.inputs.application }}" != "java-api" && -n "${{ github.event.inputs.config_option }}" ]]; then
            echo "❌ Error: Runtime customization is only allowed for go-api and java-api"
            exit 1
          fi

      - name: Modify Overlay at Runtime
        if: ${{ github.event.inputs.application == 'go-api' || github.event.inputs.application == 'java-api' }}
        run: |
          FILE=""

          # Determine which file to modify based on application type
          if [[ "${{ github.event.inputs.application }}" == "go-api" ]]; then
            FILE="go-api/overlays/patches/deploy.yaml"
          elif [[ "${{ github.event.inputs.application }}" == "java-api" && "${{ github.event.inputs.config_option }}" == "maxReplicas" ]]; then
            FILE="java-api/overlays/patches/hpa.yaml"
          elif [[ "${{ github.event.inputs.application }}" == "java-api" ]]; then
            FILE="java-api/overlays/patches/deploy.yaml"
          fi

          if [[ -z "$FILE" ]]; then
            echo "❌ Error: No valid file found to modify."
            exit 1
          fi

          # Modify only the selected configuration key
          if [[ "${{ github.event.inputs.config_option }}" != "" ]]; then
            echo "🔹 Updating $FILE: Setting ${{ github.event.inputs.config_option }} to ${{ github.event.inputs.new_value }}"

            case "${{ github.event.inputs.config_option }}" in
              cpu_limit)
                yq -i '.spec.template.spec.containers[0].resources.limits.cpu = "${{ github.event.inputs.new_value }}"' $FILE ;;
              memory_limit)
                yq -i '.spec.template.spec.containers[0].resources.limits.memory = "${{ github.event.inputs.new_value }}"' $FILE ;;
              cpu_request)
                yq -i '.spec.template.spec.containers[0].resources.requests.cpu = "${{ github.event.inputs.new_value }}"' $FILE ;;
              memory_request)
                yq -i '.spec.template.spec.containers[0].resources.requests.memory = "${{ github.event.inputs.new_value }}"' $FILE ;;
              timeout_seconds)
                yq -i '.spec.template.spec.containers[0].livenessProbe.timeoutSeconds = "${{ github.event.inputs.new_value }}"' $FILE ;;
              initial_delay_seconds)
                yq -i '.spec.template.spec.containers[0].livenessProbe.initialDelaySeconds = "${{ github.event.inputs.new_value }}"' $FILE ;;
              revision_history_limit)
                yq -i '.spec.revisionHistoryLimit = "${{ github.event.inputs.new_value }}"' $FILE ;;
              terminationGracePeriodSeconds)
                yq -i '.spec.template.spec.terminationGracePeriodSeconds = "${{ github.event.inputs.new_value }}"' $FILE ;;
              maxReplicas)
                yq -i '.spec.maxReplicas = "${{ github.event.inputs.new_value }}"' $FILE ;;
              *)
                echo "❌ Error: Invalid option selected."
                exit 1 ;;
            esac

            echo "✅ Updated $FILE successfully!"
          else
            echo "⚠️ No configuration change requested. Proceeding with default values."
          fi

      - name: Run Kustomize Build for ${{ github.event.inputs.application }}
        run: |
          kustomize build ${{ github.event.inputs.application }}/overlays/ > output.yaml

      - name: Show Output Manifests
        run: cat output.yaml

      - name: Validate Kubernetes Manifests
        run: |
          curl -sLO https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          ./kubeval --ignore-missing-schemas output.yaml
